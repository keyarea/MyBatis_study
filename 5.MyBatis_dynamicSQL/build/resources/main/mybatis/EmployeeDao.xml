<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace: 名称空间; 写接口的全类名; 相当于告诉MyBatis是实现哪个接口的; -->
<mapper namespace="net.qipo.dao.EmployeeDao">
    <!--  这个文件中能写的所有标签
        cache: 和缓存有关；
        cache-ref： 和缓存有关；
        delete、update、insert、select: 增删改查;
            databaseId：指定这个CRUD属于哪个数据库；
        parameterMap: 参数map：废弃、、原本是来做复杂参数映射的；
        resultMap： 结果映射；自定义结果集的封装规则；
        sql： 抽取可重用的sql
      -->



    <!--
    public Employee getEmpById(Integer id);
    public int updateEmployee(Employee employee);
    public int deleteEmployee(Integer id);
    public int insertEmployee(Employee employee);
     -->
    <select id="getEmpById" resultType="net.qipo.bean.Employee">
        SELECT * FROM t_employee WHERE id=#{id}
    </select>

    <!-- 增删改不用写返回值类型,增删改是返回影响多少行
        MyBatis 自动判断,如果是数字
        如果是boolean: 影响0行就是自动封装false,否则true
     -->
    <update id="updateEmployee" >
        UPDATE t_employee SET empname=#{empName},gender=#{gender},email=#{email} WHERE id=#{id}
    </update>

    <delete id="deleteEmployee">
        DELETE FROM t_employee WHERE id=#{id}
    </delete>


    <!-- 让MyBatis自动的将自增id赋值给传入的employee对象的id属性
        useGeneratedKeys="true": 原生jdbc获取自增主键的方法；
        keyProperty: 将刚才自增的id封装给哪个属性

        #{key}取值的时候可以设置一些规则：
        id=#{id,jdbcType=INTEGER}
        javaType、jdbcType、mode、、、
        只有jdbcType才可能是需要被指定的；
            默认不指定jdbcType：mysql没问题、oracle也没问题
            万一传入的数据为null；
            mysql插入null没问题，oracle就不知道null是什么类型

        实际上mybatis中，两种取值方式：
        #{属性名};是参数预编译的方式，参数的位置都是用？替代的，参数后来都是预编译设置进去的；安全，不会有sql注入问题；
        ${属性名};不是参数预编译，而是直接和sql语句进行拼串；不安全；

        sql语句只有参数的位置是支持预编译的；比如表名就不支持预编译，只能用${}取出
        一般都是使用#{}:安全；在不支持参数预编译的位置要进行取值时就使用${};
     -->
    <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="id">
        INSERT  INTO t_employee(empname,gender,email) VALUES(#{empName},#{gender},#{email})
    </insert>

    <!--    <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="id">-->
<!--         &lt;!&ndash; 查询主键-->
<!--            order="BEFORE": 在核心sql语句之前先运行一个sql查到id；将拿到的id赋值给javaBean哪个属性；-->
<!--          &ndash;&gt;-->
<!--        <selectKey order="BEFORE" resultType="integer" keyProperty="id">-->
<!--            SELECT max(id)+1 from t_employee-->
<!--        </selectKey>-->
<!--        INSERT  INTO t_employee(id,empname,gender,email) VALUES(#{id},#{empName},#{gender},#{email})-->
<!--    </insert>-->

    <!-- 查询返回一个list -->
    <!-- public List<Employee> getAllEmps(); -->
    <!--
        resultType="": 如果返回的是集合，写的是集合里面元素的类型
     -->
    <select id="getAllEmps" resultType="net.qipo.bean.Employee">
        select * from t_employee
    </select>

    <!-- 查询返回一个Map -->
    <!-- public Map<String, Object> getEmpByIdReturnMap(Integer id); -->
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from t_employee where id=#{id}
    </select>

    <!-- 查询多个返回一个map -->
    <!--     public Map<Integer, Employee> getAllEmpReturnMap(); -->
    <select id="getAllEmpReturnMap" resultType="net.qipo.bean.Employee">
        select * from t_employee
    </select>
</mapper>